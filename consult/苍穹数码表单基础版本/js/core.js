var Factory = {    create: function() {        return function(){this.initialize.apply(this, arguments); }    }}var BindAsEventListener = function(object, fun) {    var args = Array.prototype.slice.call(arguments).slice(2);    return function(event) {        return fun.apply(object, [event || window.event].concat(args));    }}var Bind = function(object, fun) {    return function() {        return fun.apply(object, arguments);    }}var CurrentStyle = function(element){    return element.currentStyle || document.defaultView.getComputedStyle(element, null);}  function drag(elementToDrag,event,isMove,limit){    //var locTag = document.getElementById("loc");    var startX = event.clientX, startY = event.clientY;//事件开始时的坐标    var origX = elementToDrag.offsetLeft , origY = elementToDrag.offsetTop;//控件的左上角坐标    var deltaX = startX - origX, deltaY = startY - origY;    var oldmovehandler,olduphandler;    if(document.addEventListener) {        document.addEventListener("mousemove", moveHandler, true);        document.addEventListener("mouseup",upHandler,true);    }else if(document.attachEvent){        elementToDrag.setCapture();        elementToDrag.attachEvent("onmousemove",moveHandler);        elementToDrag.attachEvent("onmouseup",upHandler);        elementToDrag.attachEvent("onlosecapture",upHandler);    }else{        oldmovehandler = document.onmousemove;        olduphandler = doucment.onmouseup;        docuemnt.onmousemove = moveHandler;        document.onmouseup = upHandler;    }    if(event.stopPropagation) event.stopPropagation();//取消起泡事件    else event.cancelBubble = true;    if(event.preventDefault) event.preventDefault();//取消当前事件的默认动作    else event.returnValue = false;    function moveHandler(e){        if(!e) e = window.event;        if(isMove){            //elementToDrag.setLeft(e.clientX - deltaX);            //elementToDrag.setTop(e.clientY - deltaY);            elementToDrag.style.left = (e.clientX - deltaX) + "px";            elementToDrag.style.top = (e.clientY - deltaY) + "px";        }else{            var t_w = (parseInt(elementToDrag.style.width) + (e.clientX - (parseInt(elementToDrag.style.left) + parseInt(elementToDrag.style.width))));            var t_h = (parseInt(elementToDrag.style.height) + (e.clientY - (parseInt(elementToDrag.style.top) + parseInt(elementToDrag.style.height))));            elementToDrag.style.width =  (t_w < limit[0][0]) ? limit[0][0] : (t_w > limit[1][0]) ? limit[1][0] : t_w + "px";            elementToDrag.style.height = (t_h < limit[0][1]) ? limit[0][1] : (t_h > limit[1][1]) ? limit[1][1] : t_h + "px";            //locTag.innerHTML = elementToDrag.style.width + "," + elementToDrag.style.height;        }        if(e.stopPropagation) e.stopPropagation();        else e.cancelBubble = true;    }    function upHandler(e){        if(!e) e =  window.event;        if(document.removeEventListener){            document.removeEventListener("mouseup", upHandler, true);            document.removeEventListener("mousemove", moveHandler, true);        }else if(document.detachEvent){            elementToDrag.detachEvent("onlosecapture", upHandler);            elementToDrag.detachEvent("onmouseup", upHandler);            elementToDrag.detachEvent("onmousemove", moveHandler);            elementToDrag.releaseCapture();        }else{            document.onmouseup = olduphandler;            document.onmousemove = oldmovehandler;        }        if(e.stopPropagation) e.stopPropagation();        else e.cancelBubble = true;    }  }var EJS={}/** *异常类 * * */EJS.Message = function(){    var message = [];    return {        add : function(_msg){if(_msg && EJS.Util.Format.trim(_msg)!="") message.push(_msg);},        showMsg : function(){            alert(message.join("\n"));        },        isEmpty : function(){            return (message.length == 0)? true : false;        }    }}EJS.Client=function(){    var ua = navigator.userAgent.toLowerCase();    return{        isStrict : document.compatMode == "CSS1Compat",        isOpera : ua.indexOf("opera") > -1,        isSafari : (/webkit|khtml/).test(ua),        isIE : ua.indexOf("msie") > -1,        isIE6 : ua.indexOf("msie 6") > -1,        isIE7 : ua.indexOf("msie 7") > -1,        isIE8 : ua.indexOf("msie 8") > -1,        isGecko : !this.isSafari && ua.indexOf("gecko") > -1,        isBorderBox : this.isIE && !this.isStrict,        isWindows : (ua.indexOf("windows") != -1 || ua.indexOf("win32") != -1),        isMac : (ua.indexOf("macintosh") != -1 || ua.indexOf("mac os x") != -1),        isLinux : (ua.indexOf("linux") != -1),        isSecure : window.location.href.toLowerCase().indexOf("https") === 0,        boxModel: ua.indexOf("msie") == -1 || document.compatMode == "CSS1Compat"    }}();EJS.Client.getClientLoc = function(_loc){    var st = document.documentElement.scrollTop || document.body.scrollTop;    var sl = document.documentElement.scrollLeft || document.body.scrollLeft;    var cw = EJS.Client.boxModel ? document.documentElement.clientWidth : document.body.clientWidth;    var ch = EJS.Client.boxModel ? document.documentElement.clientHeight : document.body.clientHeight;    var pw = document.documentElement.scrollWidth;    var ph = document.documentElement.scrollHeight < document.documentElement.offsetWidth ? document.documentElement.offsetWidth : document.documentElement.scrollHeight;        var xy;    switch(_loc){        case "t" : xy = {x : (cw / 2) + sl, y : st};break;        case "r" : xy = {x : cw + sl, y : (ch / 2) + st};break;        case "b" : xy = {x : (cw / 2) + sl, y : st + ch};break;        case "l" : xy = {x : sl, y : (ch / 2) + st};break;        case "tr" : xy = {x : cw + sl, y : st};break;        case "rb" : xy = {x : cw + sl, y : st + ch};break;        case "bl" : xy = {x : sl, y : st + ch};break;        case "lt" : xy = {x : sl, y : st};break;        case "c" : xy = {x : (cw / 2) + sl, y : (ch / 2) + st};break;        case "wh" : xy = {x : cw, y : ch};break;//宽高        case "pagewh" : xy = {x : pw, y : ph};     }    xy.x = Math.round(xy.x)    xy.y = Math.round(xy.y)    return xy;}    EJS.Event={};EJS.Event.getEvent = function(){    if(document.all || window.event){        return window.event;    }    var _caller = EJS.Event.getEvent.caller;    while(_caller!=null){        var _argument = _caller.arguments[0];        if(_argument){            var _temp = _argument.constructor;            if(_temp.toString().indexOf("Event")!=-1)            {                return _argument;            }        }        _caller = _caller.caller;    }    return null;}EJS.Event.getEventTarget = function(){    var event = EJS.Event.getEvent();    var target = event && event.target ? event.target : event.srcElement;    return target;}//取消冒泡事件EJS.Event.cancelBubble = function(){    var event = EJS.Event.getEvent();    if(event.stopPropagation) event.stopPropagation();//取消起泡事件    else event.cancelBubble = true;    if(event.preventDefault) event.preventDefault();//取消当前事件的默认动作    else event.returnValue = false;}EJS.Event.Handler = function(){    var __handlerCache = {};    var __elementUIDCache = {};    var __onunloadHandlerRegistered = false;    return {        add : function(_element, _eventType, _handler){            if(this.find(_element, _eventType, _handler) != -1) return false;                        if(_element){                var __uid;                if(_element.nodeType == 1){                    if(_element.getAttribute("__handlerUID") == null || _element.getAttribute("__handlerUID") == ""){                        __uid = EJS.Util.GUID.get();                        _element.setAttribute("__handlerUID", __uid);                    }else{                        __uid = _element.getAttribute("__handlerUID");                    }                }else if(_element.nodeType == 9){                    __uid = "currentDocument";                }                if(!__handlerCache[__uid]){                    __handlerCache[__uid] = [];                }                var __wrappedHandler = function(){                    _handler.call(_element);                }                __elementUIDCache[__uid] = _element;                __handlerCache[__uid].push({                    eventType : _eventType,                    handler : _handler,                    wrappedHandler : __wrappedHandler                });                if(document.addEventListener){                    _element.addEventListener(_eventType, _handler, false);                }else if(document.attachEvent){                    //这里不知道为什么要把_handler方法包装成__wrappedHandler，如果不包装，在响应IE的onkeyup事件时，this.value为null                    _element.attachEvent("on" + _eventType, __wrappedHandler);                }                //卸载页面前，注销所有已注册事件，以防止内存泄露                if(!__onunloadHandlerRegistered && document.attachEvent){                    var pw = (_element.document || _element).parentWindow;                    pw.attachEvent("onunload", EJS.Event.Handler.destroy);                    __onunloadHandlerRegistered = true;                                    }                return true;            }            return false;        },        remove : function(_element, _eventType, _handler){            var __hIndex = this.find(_element, _eventType, _handler);            if(__hIndex == -1) return false;            var __handlerUID;            if(_element.nodeType == 1){                __handlerUID = _element.getAttribute("__handlerUID");            }else if(_element.nodeType == 9){                __handlerUID = "currentDocument";            }            if(document.removeEventListener){                _element.removeEventListener(_eventType, _handler, false);            }else if(document.detachEvent){                _element.detachEvent("on" + _eventType, __handlerCache[__handlerUID][__hIndex].wrappedHandler);            }            __handlerCache[__handlerUID].splice(__hIndex, 1);//删除事件        },        removeByEventType : function(_element, _eventType){            var __handlerUID;            if(_element.nodeType == 1){                __handlerUID = _element.getAttribute("__handlerUID");            }else if(_element.nodeType == 9){                __handlerUID = "currentDocument";            }                        if(__handlerUID != null){                var __handlers = __handlerCache[__handlerUID];                                if(__handlers != null && __handlers.constructor == Array){                    for(var _i in __handlers){                        var _h = __handlers[_i];                        if(_h.eventType == _eventType){                            this.remove(_element, _eventType, _h.handler);                        }                    }                    __handlerCache[__handlerUID] = null;                    delete __handlerCache[__handlerUID];                    //alert(__handlerCache[__handlerUID]);                }            }        },        removeAll : function(_element){            var __handlerUID;            if(_element.nodeType == 1){                __handlerUID = _element.getAttribute("__handlerUID");            }else if(_element.nodeType == 9){                __handlerUID = "currentDocument";            }            if(__handlerUID != null && __handlerUID != ""){                               var __handlers =  __handlerCache[__handlerUID];                if(__handlers != null && __handlers.constructor == Array){                    for(var _i = __handlers.length - 1; _i >= 0; _i--){                                                var _h = __handlers[_i];                        if(document.removeEventListener){                            _element.removeEventListener(_h.eventType, _h.handler, false);                        }else if(document.detachEvent){                            _element.detachEvent("on" + _h.eventType, _h.wrappedHandler);                        }                        __handlers.splice(_i, 1);                    }                }            }        },        find : function(_element, _eventType, _handler){            var __handlerUID;            if(_element.nodeType == 1){                __handlerUID = _element.getAttribute("__handlerUID");            }else if(_element.nodeType == 9){                __handlerUID = "currentDocument";            }            if(__handlerUID != null){                var __handlers = __handlerCache[__handlerUID];                                if(__handlers != null && __handlers.constructor == Array){                    for(var _i in __handlers){                        var _h = __handlers[_i];                        if(_h.eventType == _eventType && _h.handler == _handler){                            return _i;                        }                    }                }            }            return -1;        },        destroy : function(){            for(var __UIDIndex in __handlerCache){                var __handlers = __handlerCache[__UIDIndex];                var __element = __elementUIDCache[__UIDIndex];                for(var _i = __handlers.length - 1; _i >= 0; _i--){                    var _h = __handlers[_i];                    if(document.removeEventListener){                        __element.removeEventListener(_h.eventType, _h.handler, false);                    }else if(document.detachEvent){                        __element.detachEvent("on" + _h.eventType, _h.wrappedHandler);                    }                    __handlers.splice(_i, 1);                }            }        }    }}();/** *derived:子类,最好这里是function类型 *base:父类,可以为类(function定义的)，也可以是对象(new class()) * */EJS.extend = function(){    return function(derived, base, isOverride){        function generatePrototype(base){            if(base === undefined){                return {};            }else{                var prototypeProxy = generatePrototype(base.prototype);                if(typeof base == 'object'){//如果父类是对象则将父类的属性、方法全都继承过来                    for(var property in base){                        if(base.hasOwnProperty(property)) {prototypeProxy[property] = base[property];}else{alert(property)}                    }                }else if(typeof base == 'function'){//如果父类是function                    if(base.prototype){                        return prototypeProxy;                    }else{                        return {};                    }                    //base.call(prototypeProxy);                }                return prototypeProxy;            }        }        if(typeof derived == "object"){            for(var name in base){                if(base.hasOwnProperty(name)){                    if(derived[name] && !isOverride) continue;                    var copy = base[name];                    if(copy && typeof copy == "object" && !copy.nodeType){                        //derived[name] = EJS.extend({}, copy);                        if(base[name] != base)//不这样写会引起死循环                        derived[name] = EJS.clone(copy);                    }else if(copy !== undefined){                        derived[name] = copy;                    }                }else{                    //alert(name)                }            }        }else if(typeof derived == "function"){            var proxyPrototype = generatePrototype(base);            if(derived.prototype != null){//多重继承                EJS.extend(proxyPrototype, derived.prototype, true);            }            derived.prototype = proxyPrototype;            derived.constructor = derived;            derived.prototype.superClass = proxyPrototype;        }        return derived;            }}();EJS.clone = function(_obj){    if(!_obj) return null;    if(_obj.nodeType == 1){//克隆一个dom        if(EJS.Client.isIE && !EJS.Util.isXMLDoc(_obj)){            var __c = EJS.Dom.DomHelper.create({tagName : "div"}).appendChild(_obj.cloneNode(true));            return __c.childNodes[0];        }else{            return _obj.cloneNode(true);        }    }else{//克隆一个对象        if(typeof _obj == 'object'){            var __clone = {};            switch(_obj.constructor){                case 'Array' : __clone = [];break;            }            for(var __attr in _obj){                if(_obj.hasOwnProperty(__attr)){                    __clone[__attr] = EJS.clone(_obj[__attr]);                }else{                    //alert(__attr)                }            }        }else{//一般属性            return _obj;        }    }}/** *工具类 */EJS.Util = {};EJS.Util.addLoadEvent = function(_func){    var oldFun = window.onload;    if(typeof oldFun != 'function'){        window.onload = _func;    }else{        window.onload = function(){            oldFun();            _func();        }    }}EJS.Util.GUID = function(){    return {        get : function(){            //var   guid   =   "{";            var guid = "";            for(var i=1;i<=32;i++){                var n = Math.floor(Math.random() * 16.0).toString(16);                guid+=n;                if((i==8)||(i==12)||(i==16)||(i==20)){                    guid += "-";                }            }            //guid   +=   "}";            return guid;        }    }}();EJS.Util.Regex = {        int : /^[1-9]\d*$|^0$/,                                             //整型        decimal : /^\d+(\.\d+)?$/,                                          //浮点型        intstr : /^\d+$/,                                                   //数值型字符串        english : /^[a-zA-Z]+$/,                                            //英文        english_int :/^\w+$/,                                               //英文与数值        chinese :/^[\u0391-\uFFE5]+$/,                                      //中文        email :/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,             //电子邮件地址        url :/^[a-zA-Z]{3,5}\:\/\/(\w+\.)+\w{2,3}\/?.*$/,                   //URL        date :/^((((\d{2}(([2468][048])|([02468][48])|([13579][26])))|((([02468][048])|([13579][26]))(00)))(-)(2|02)(-)(([0]?[1-9])|([1-2][0-9])))|((([0-9]{2}([02468][1235679])|([13579][01345789]))|((([02468][1235679])|([13579][01345789]))(00)))(-)(2|02)(-)(([0]?[1-9])|([1][0-9])|([2][0-8])))|(([0-9]{4})(-)(((([0]?(1|3|5|7|8))|(10|12))(-)(([0]?[1-9])|([1-2][0-9])|30|31))|(((([0]?(4|6))|11))(-)(([0]?[1-9])|([1-2][0-9])|30)))))$/,                                                                            //日期型（年份）        time :/^(([01]?\d)|(2[0-3]))\:[0-5]?[0-9]\:[0-5]?[0-9]$/,           //时间型        dateTime :/^((((\d{2}(([2468][048])|([02468][48])|([13579][26])))|((([02468][048])|([13579][26]))(00)))(-)(2|02)(-)(([0]?[1-9])|([1-2][0-9])))|((([0-9]{2}([02468][1235679])|([13579][01345789]))|((([02468][1235679])|([13579][01345789]))(00)))(-)(2|02)(-)(([0]?[1-9])|([1][0-9])|([2][0-8])))|(([0-9]{4})(-)(((([0]?(1|3|5|7|8))|(10|12))(-)(([0]?[1-9])|([1-2][0-9])|30|31))|(((([0]?(4|6))|11))(-)(([0]?[1-9])|([1-2][0-9])|30)))))\s(([01]?\d)|(2[0-3]))\:[0-5]?[0-9]\:[0-5]?[0-9]$/,                                                                            //日期日间型        all :/.*/                                                           //任意值}EJS.Util.Format=function(){    //private    var trimReg = /^\s+|\s+$/g;//头尾空格    //static method    return {        /**         *去掉字符串两端空格         *@param (String) 要去掉空格的字符串         *@return (String) 去掉空格后的字符串         */        trim : function(value){            return String(value).replace(trimReg, "");        },        /**         *截取字符串长度，将后三位字符换成"..."         *@param (String) 要截取长度的字符串         *@return (String) 截取长度后的字符串         */        ellipsis : function(value, len){            if(value && value.length > len){                return value.substr(0, len-3)+"...";            }            return value;        },        /**         *将字符串全部转换为小写         *@param (String) 需转换为小写的字符串         *@return (String) 转换为小写后的字符串         */        lowercase : function(value){            return String(value).toLowerCase();        },        /**         *将字符串全部转换为大写         *@param (String) 需转换为大写的字符串         *@return (String) 转换为大写后的字符串         */        uppercase : function(value){            return String(value).toUpperCase();        },        /**         *截取子字符串         *@param (String) 原字符串         *@param (int) 截取的开始位置         *@param (int) 截取的长度         *@return (String) 截取后的子串         */        substr : function(value, start, length){            return String(value).substr(start, length);        },        /**         *正则表达式匹配是否存在汉字，如果存在则每个汉字替换为2个半角的英文m         *@param strObj(String)要处理的字符串         *@param n(int) 字符串的长度         *需要修改         */        strDisplay : function(strObj,n){            var r =/[^\x00-\xff]/g;             if(strObj.replace(r, "mm").length > n) {                 var m = Math.floor(n/2);                 for(var i=m; i<strObj.length; i++) {                     if(strObj.substr(0, i).replace(r, "**").length>=n) {                         return strObj.substr(0, i) +"...";                     }                 }             }             return strObj;         }    }}();EJS.Util.isFunction = function( fn ) {    return !!fn && typeof fn != "string" && !fn.nodeName &&        fn.constructor != Array && /^[\s[]?function/.test( fn + "" );}EJS.Util.isXMLDoc = function(_e){    return _e.documentElement && _e.body || _e.tagName && _e.ownerDocument && _e.ownerDocument.body;}EJS.Util.loadScriptEval = function( _data ) {    _data = EJS.Util.Format.trim( _data );        if ( _data ) {        // Inspired by code by Andrea Giammarchi        // http://webreflection.blogspot.com/2007/08/global-scope-evaluation-and-dom.html        var head = document.getElementsByTagName("head")[0] || document.documentElement,            script = document.createElement("script");        script.type = "text/javascript";                if ( EJS.Client.isIE )            script.text = _data;        else            script.appendChild( document.createTextNode( _data ) );        // Use insertBefore instead of appendChild  to circumvent an IE6 bug.        // This arises when a base node is used (#2709).        head.insertBefore( script, head.firstChild );        head.removeChild( script );    }}EJS.Util.loadCss = function(_data, _type){    if(_data){        var head = document.getElementsByTagName("head")[0] || document.documentElement,cssTag;        if(_type == "inner"){            cssTag = document.createElement("style");            cssTag.setAttribute("type", "text/css");            if(cssTag.styleSheet){// IE                cssTag.styleSheet.cssText = _data;            } else {// w3c                cssTag.appendChild(document.createTextNode(_data));            }        }else if(_type == "outer"){            cssTag = document.createElement("link");            cssTag.href = _data;            cssTag.rel = "stylesheet";            cssTag.type = "text/css";        }        head.insertBefore( cssTag, head.firstChild );        //head.removeChild( cssTag );    }}EJS.Util.math = function(){    return {        /**         *验证参数1是否在参数2描述的范围内         *@param (number) 被验证的数值         *@param (String) 验证的范围，可用两种方式描述，1：可用逗号(,)做为分隔符如[1,3,5,6]被验证的数值如果与其中任意一个值相等则成功;                                                        2：可用中横杠(-)做为分隔符如[1-9]、[1-]或[-9]，这里表示的是一个数值区间，如果被验证的数值在描述的区间内则成功。                                                            注：如果横杠左边无值则表示用可描述最小值代替，如果横杠右边无值则表示用可描述最大值代替         *@return (boolean) 如果验证成功则返回true，否则返回false;         */        availNumLimit : function(_v, _limit){            _v = Number(_v);            if(!isNaN(_v)){                var pattern1 = /^\d+(,\d+)*$/;//point                var pattern2 = /^((\d+-\d+)|(\d+-)|(-\d+))$/;//region  1-2 1- -2                var limitArr = [];                var flag = "";//region or point                if(pattern1.test(_limit)){                    flag = "point";                    limitArr = _limit.split(",");                    for(var i = 0; i < limitArr.length; i++){                        if(_v == Number(limitArr[i])){                            return true;                        }                    }                    return false;                }else if(pattern2.test(_limit)){                    flag = "region";                    limitArr = _limit.split("-");                    limitArr[0] = limitArr[0] == "" ? Number.MIN_VALUE : Number(limitArr[0]);                    limitArr[1] = limitArr[1] == "" ? Number.MAX_VALUE : Number(limitArr[1]);                    if(limitArr[0] > limitArr[1]){                        var temp = limitArr[0];                        limitArr[0] = limitArr[1];                        limitArr[1] = temp;                    }                    if(_v >= limitArr[0] && _v <= limitArr[1]){                        return true                    }                    return false;                }            }            return false;        },        /**         *如果参数1不是一个数值则将参数2所表示的数值返回，如果参数2也不是数值则返回0;         *@param  (var) 被检查的值         *@param  (var) 如果参数1不是数值，且该值是数值时将该值返回。         *@return (Number) 返回的数值         */        getTrueNum : function(_v, _dv){            var __result = EJS.Util.getTrueValue(_v, _dv);            if(isNaN(__result)){                if(arguments.length == 2 && _dv != null){                    _dv = Number(_dv);                    if(!isNaN(_dv)){                        __result = _dv;                    }else{                        __result = 0;                    }                }            }            return __result;        }    }}();/** *检查参数1返回一个非空值，当参数1为空或不存在时且数参2存在时则返回参数2，当参数2不存在时则返回参数1的状态"unll"或"underfined" *@param  (String) 被检查的值 *@param  (String) 该参数可以是字符中或是方法。 *@return (String) 返回的字符串 */EJS.Util.getTrueValue = function(_v, _dv){    var __result = _v;    if(_v == null || _v == undefined || _v.length == 0 || _v == "undefined"){        if(arguments.length == 2 && _dv != null){            if(typeof _dv == "function"){                __result = _dv();                            }else{                __result = _dv;            }                    }else{            __result = _v == null ? "null" : "undefined";        }    }    return __result;}/** *复键Map * * * */EJS.Util.MultiKeyMap = function(_config){    var __keyIndex = [];//索引    var __dataArray = [];//数据数组    var __isSort = false;    //功能参数    var __config = {        haveSortNum : false    }    if(_config == null) _config = {};        EJS.extend(_config, __config);    /**     *根据键值匹配对象     *     */    function binarySearch(_key, _isLike){        if(__keyIndex && __keyIndex.length && __keyIndex.length > 0){            var __leftPointer = 0, __rightPointer = __keyIndex.length - 1;            while(__leftPointer <= __rightPointer){                var __middlePointer = Math.floor((__leftPointer + __rightPointer) / 2);                if(_isLike){                    if(new RegExp("^"+_key, "i").test(__keyIndex[__middlePointer].indexName)){return __middlePointer;}//这里只用返回索引位置                }else{                    if(_key == __keyIndex[__middlePointer].indexName){return __keyIndex[__middlePointer].indexValue;}//这里返回索引所指向对象的指针                }                //if(_key.localeCompare(__keyIndex[__middlePointer].indexName) > 0){                                if(_key > __keyIndex[__middlePointer].indexName){                    __leftPointer = __middlePointer + 1;                }else{                    __rightPointer = __middlePointer - 1;                }                if(__leftPointer >= __keyIndex.length || __rightPointer < 0){                    return -1;                }            }        }        return -1;    }        //这里可以用分块查找的方法提升效率    /**     *根据键值查找插入点     *     */    function searchInsertPoint(_key){        var __leftPointer = 0, __rightPointer = __keyIndex.length - 1;//范围指针                while(__leftPointer <= __rightPointer){                        var __middlePointerLeft = Math.floor((__leftPointer + __rightPointer) / 2);//用于比较的左指针            var __middlePointerRight = __middlePointerLeft + 1;//用于比较的右指针            if(__middlePointerRight >= __keyIndex.length) __middlePointerRight = __keyIndex.length - 1;//当右数据指针指的位置越界，则将右数据指针的位置指向左数据指针指的位置，这种情况出现在索引中只有一个数据时            //if(_key.localeCompare(__keyIndex[__middlePointerLeft].indexName) < 0){//如果key小于左边的值则修改右侧范围指针            if(_key < __keyIndex[__middlePointerLeft].indexName){//如果key小于左边的值则修改右侧范围指针                            __rightPointer = __middlePointerLeft;                if(__rightPointer == __leftPointer) return __leftPointer;//插到索引最左边                continue;            //}else if(_key.localeCompare(__keyIndex[__middlePointerRight].indexName) > 0){            }else if(_key > __keyIndex[__middlePointerRight].indexName){                            __leftPointer = __middlePointerRight;                if(__rightPointer == __leftPointer) return __rightPointer + 1;//插到索引最右边                continue;            }            //if(_key.localeCompare(__keyIndex[__middlePointerLeft].indexName) >= 0 && _key.localeCompare(__keyIndex[__middlePointerRight].indexName) <= 0){//是否在两个值中间，或等于其中某值            if(_key >= __keyIndex[__middlePointerLeft].indexName && _key <= __keyIndex[__middlePointerRight].indexName){//是否在两个值中间，或等于其中某值                //if(_key.localeCompare(__keyIndex[__middlePointerRight].indexName) == 0){//如果key等于右边的值则返回右指针加一的位置                            if(_key == __keyIndex[__middlePointerRight].indexName){//如果key等于右边的值则返回右指针加一的位置                    return __middlePointerRight + 1;                }                return __middlePointerLeft + 1;            }        }        return 0;//索引为空时    }    //对索引进行快速排序    var quicksortObj = function(){        /**         *@param  _array(Array) 索引数组         *@param _left(int) 待排数组的左边界         *@param _right(int) 待排数组的右边界         */        function partition (_array, _left, _right){            var lo, hi, pivot, temp;            pivot = _array[_left];            lo = _left - 1;            hi=_right + 1;            while(lo + 1 != hi) {                if(_array[lo + 1].indexName <= pivot.indexName)                //if(__sortFun(_array[lo + 1], pivot) <= 0)                    lo++;                else if(_array[hi - 1].indexName > pivot.indexName)                //else if(__sortFun(_array[hi - 1], pivot) > 0)                    hi--;                else {                    temp =_array[lo + 1];                    _array[++lo] = _array[hi - 1];                    _array[--hi] = temp;                }            }            _array[_left] = _array[lo];            _array[lo] = pivot;            return lo;        }        /**         *@param  _array(Array) 索引数组         *@param _left(int) 待排数组的左边界         *@param _right(int) 待排数组的右边界         */        function quicksort(_array, _left, _right){            if(isNaN(_left)) {_left = 0;}            if(isNaN(_right)) _right = _array.length - 1;            if (_left < _right) {                 var dp = partition(_array, _left, _right);                 quicksort(_array, _left, dp-1);                 quicksort(_array, dp+1, _right);             }        }        return {            sort : function(_array, _sortFun){                //__sortFun = _sortFun;//发现用比较函数，效率很低，没有使用了                quicksort(_array, 0, _array.length - 1);            }        }    }();    var __sort = function(){        quicksortObj.sort(__keyIndex, function(a,b){            var objA = new String(a);            var objB = new String(b);            //alert(objA +":"+ objB +":"+ objA.localeCompare(objB))            return objA.localeCompare(objB);        });        __isSort = true;    }    /**     *添加数据     *@param _key(string) 键名     *@param _value(object) 键值     *@param _isOrderInsert(boolean) 是否为有序插入，两种插入的算法不同，一种是查找插入点，另一种是插到最后再排序     *     */    this.put = function(_key, _value, _isOrderInsert){        if(_key != null && _key != "" && _value != null && _value != ""){            var __keys;            if(_key.constructor == Array){                __keys = _key;            }            else{                __keys = _key.split(",");            }            __dataArray.push(_value);//将数存入数组中            var __dataLastElementIndex = __dataArray.length - 1;            var __dataLastElementIndexStr = new String(__dataLastElementIndex);            if(_isOrderInsert == null) _isOrderInsert = true;//是否是有序插入索引，默认为是，否则就是先将数据加到索引中最后排序            for(var i = 0; i < __keys.length; i++){                var __currenKey = __keys[i];                if(_isOrderInsert){//有序的插入索引中                    var __index = searchInsertPoint(__currenKey);//找查索引位置                                        __keyIndex.splice(__index, 0, {indexName : __currenKey, indexValue : __dataLastElementIndex});//插入索引数组                                        if(_config.haveSortNum && i == 0){//按put的顺序将键值的序号有序的放入索引序列                                                var __index = searchInsertPoint(__dataLastElementIndexStr);//找查索引位置                                                __keyIndex.splice(__index, 0, {indexName : __dataLastElementIndexStr, indexValue : __dataLastElementIndex});//插入索引数组                    }                                    }else{//无序的插到索引的最后面                    __keyIndex.push({indexName : __currenKey, indexValue : __dataLastElementIndex});                    if(_config.haveSortNum && i == 0){//按put的顺序将键值的序号无序的放入索引序列                        __keyIndex.push({indexName : __dataLastElementIndexStr, indexValue : __dataLastElementIndex});                    }                    __isSort = false;//标记索引为无序                }            }        }    }        /**     *通过键名查找键值     *@param _key(string) 键名     *@return (object) 查找到的键值，没找到返回null     */    this.get = function(_key){    /*        var s="";        for(var i=0;i<__keyIndex.length;i++){            s+=__keyIndex[i].indexName+",";        }        alert(s)    */        if(!__isSort){            //var a = new Date();            __sort();            //var b = new Date();            //alert("排序:"+b.getTime()+":"+a.getTime()+":"+(b-a))        }        var __result =  binarySearch(_key);        if(__result != -1) return __dataArray[__result];        else return null;    }    /**     *通过部分键名查找多个与之匹配的键     *@param _key(string) 部分键名     *@return (Array) 查找到的键值集，没找到返回null     */    this.like = function(_key){        if(!(_key && _key != "")) return null;        var __result =  binarySearch(_key, true);                if(__result == -1) return null;        var __leftFlag = __rightFlag = true;        var __leftPoint = __rightPoint = __result;        var reg = new RegExp("^"+_key, "i");        var resultList = [];                while(__leftFlag || __rightFlag){            if(__leftFlag){                __leftPoint--;                if( __leftPoint < 0 || !reg.test(__keyIndex[__leftPoint].indexName)){                    __leftFlag = false;                    __leftPoint++;                }            }                        if(__rightFlag){                __rightPoint++;                if(__rightPoint > __keyIndex.length - 1 || !reg.test(__keyIndex[__rightPoint].indexName)){                    __rightFlag = false;                    __rightPoint--;                }            }                    }                var __checkObj = {};//用于检查多键名指向同一键值时，不重复返回键值，这个方法等完善        var __sortArray = [];//返回查找到的键值序号，便于排序        for(var i = __leftPoint; i <= __rightPoint; i++){            var __dataArrayLoc = __keyIndex[i].indexValue;                        if(!__checkObj[__dataArrayLoc]){                __checkObj[__dataArrayLoc] = "";                __sortArray.push(__dataArrayLoc);                            }        }        if(__sortArray.length > 0){            __sortArray.sort();//对找到的键值序号数组进行排序        }        for(var i = 0; i < __sortArray.length; i++){            resultList.push(__dataArray[__sortArray[i]]);//按键值序号数组的顺序将键值依次放入返回数组中        }        return resultList.length > 0 ? resultList : null;    }    /**     *按put的顺序号，取出相应的数据项     *     */    this.getForIndex = function(_index){        if(!isNaN(parseInt(_index)) && _index < __dataArray.length){            return __dataArray[parseInt(__sortArray)];        }    }    this.getDatas = function(){        return __dataArray;    }    /*    //初始化    {    }(_config);    */}/** *DOM类 * */EJS.Dom = {};EJS.Dom.eventManager={    addMounseDownEvent : function(_f){        var __mounseDownEvent = document.onmousedown;        if(typeof __mounseDownEvent != 'function'){            document.onmousedown = _f;        }else{            document.onmousedown = function(){                __mounseDownEvent();                _f();            }        }    }};/** *getElement:获取dom对象 * * */EJS.Dom.getElement = function(_id){    if(typeof _id == "string")        return (document.getElementById) ? document.getElementById(_id): document.all[_id];    if(_id.nodeType && _id.nodeType == 1)        return _id;    return null;}EJS.Dom.$ = function(_id){    return EJS.Dom.getElement(_id);}/** *HTML标签控制对象    *内部用到了EJS.Dom对象的getElement() * */EJS.Dom.DomHelper = function(){    return {        create : function(_tagObj){            var el;            if(_tagObj.nodeType == 1){                return _tagObj;            }            for(_attr in _tagObj){                if(_attr == "tagName"){                    if(_tagObj.tagName != "Text"){                        el = document.createElement(_tagObj.tagName);                    }else if(_tagObj.tagName == "Text"){                        el = document.createTextNode(_tagObj.value);                    }                }else if(_attr == "textNode"){                    el = document.createTextNode(_tagObj[_attr]);                }else if(_attr == "attribute"){                    for(var name in _tagObj.attribute){                        if( _tagObj.attribute[name] != ""){                            if(name == "clazz"){                                if(document.addEventListener) {                                    el.setAttribute("class",_tagObj.attribute[name]);                                }else{                                     el.setAttribute("className",_tagObj.attribute[name]);                                }                            }else{                                                                el.setAttribute(name, _tagObj.attribute[name]);                            }                        }                    }                                    }else if(_attr == "style"){                    for(var name in _tagObj.style){                        if(_tagObj.style[name] != ""){                            el.style[name] = _tagObj.style[name];                        }                    }                }else if(_attr == "children" && _tagObj[_attr].length > 0){                                        var temp = _tagObj[_attr];                    for(var i = 0; i < temp.length; i++){                       el.appendChild(EJS.Dom.DomHelper.create(temp[i]));                    }                }else if(_attr == "html"){                    if(_tagObj[_attr] != ""){                        el.innerHTML = _tagObj[_attr];                    }                }else{//其它属性，只能是字符串                    if(_tagObj[_attr] != ""){                        el.setAttribute(_attr, _tagObj[_attr]);                    }                }            }            return el;        },        modify : function(_dom, _attrObj){            for(_attr in _attrObj){                if(_attr == "attribute"){                    for(var name in _attrObj.attribute){                        if(name == "clazz"){                            if(document.addEventListener) {                                _dom.setAttribute("class",_attrObj.attribute[name]);                            }else{                                 _dom.setAttribute("className",_attrObj.attribute[name]);                            }                        }else{                            _dom.setAttribute(name,_attrObj.attribute[name]);                        }                    }                                    }else if(_attr == "style"){                    for(var name in _attrObj.style){                        _dom.style[name] = _attrObj.style[name];                    }                }            }        },        append : function(_e,_parent){            if(_parent){                var _p = EJS.Dom.getElement(_parent);                if(_p){                    _p.appendChild(_e);                }            }else{                document.getElementsByTagName("BODY")[0].appendChild(_e);            }            return _e;        },        contains : function(_e, _parent){            if(_parent != null && _parent.nodeType == 1){                if( _parent.contains){                    if(_parent != _e && _parent.contains(_e))                        return true;                }else{                    if(_parent.compareDocumentPosition(_e) == 20)                        return true;                }            }            return false;        },        remove : function(_e,_parent){            if(_parent){                                if(typeof _parent == "string")                       _parent = EJS.Dom.getElement(_parent);                if(_parent && _e){                    EJS.Event.Handler.removeAll(_e);//注销_e上所有已注册的事件                    _parent.removeChild(_e);                    _e = null;                }            }else{                _e.parentNode.removeChild(_e);            }        }    };}();/** *CSSHelper:CSS控制类 * * * * */EJS.Dom.CSSHelper = function(){    return {        modifyName : function(_targetObj, _className){            if(document.addEventListener) {                _targetObj.setAttribute("class",_className);            }else{                 _targetObj.setAttribute("className",_className);            }        }    };}();/** *获取dom的位置 * * * */EJS.Dom.getElPos = function (elementId) {    var ua = navigator.userAgent.toLowerCase();    var isOpera = (ua.indexOf('opera') != -1);    var isIE = (ua.indexOf('msie') != -1 && !isOpera); // not opera spoof        var el = typeof elementId == "string" ? EJS.Dom.getElement(elementId) : elementId;    if(el.parentNode === null || el.style.display == 'none') {        return false;    }          var parent = null;    var pos = [];         var box;    if(el.getBoundingClientRect){//IE                box = el.getBoundingClientRect();        var scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);        var scrollLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);                return {left:box.left + scrollLeft, top:box.top + scrollTop};    }else if(document.getBoxObjectFor){// gecko            box = document.getBoxObjectFor(el);         var borderLeft = (el.style.borderLeftWidth)?parseInt(el.style.borderLeftWidth):0;         var borderTop = (el.style.borderTopWidth)?parseInt(el.style.borderTopWidth):0;         pos = [box.x - borderLeft, box.y - borderTop];    } else {    // safari & opera            pos = [el.offsetLeft, el.offsetTop];          parent = el.offsetParent;             if (parent != el) {             while (parent) {              pos[0] += parent.offsetLeft;             pos[1] += parent.offsetTop;             parent = parent.offsetParent;            }          }           if (ua.indexOf('opera') != -1 || ( ua.indexOf('safari') != -1 && el.style.position == 'absolute' )) {             pos[0] -= document.body.offsetLeft;            pos[1] -= document.body.offsetTop;                 }        }                  if (el.parentNode) {         parent = el.parentNode;    } else {        parent = null;    }    while (parent && parent.tagName != 'BODY' && parent.tagName != 'HTML') { // account for any scrolled ancestors        pos[0] -= parent.scrollLeft;        pos[1] -= parent.scrollTop;        if (parent.parentNode) {            parent = parent.parentNode;        } else {            parent = null;        }    }    //return {x:pos[0], y:pos[1]};    return {left: pos[0], top: pos[1]}}EJS.Dom.cache = function(){    var curentObjCount = 0;    var cache={};    return{        put : function(_key,_value){            if(_key == ""){                //_key = "EJS_dom_obj_" + (curentObjCount++);                //_value.setAttribute("id",_key);                _key = EJS.Util.GUID.get();                _value.setId(_key);            }            cache[_key] = _value;        },        get : function(_key){            if(cache[_key]){                return cache[_key];            }else{                return null;            }                    },        getAll : function(){            var childs = [];            for(var child in cache){                childs.push(cache[child]);            }            return childs;        },        remove : function(_key){            delete cache[_key];        }    }};/********************************************************************************************************************************/timeStamp = function(){    return{        get : function(){            return +new Date;        }    }}();EJS.ajaxAPI = function(){return{    load : function(tagId, url, params, callback ) {        if ( typeof url != 'string' )            return false;        var off = url.indexOf(" ");        if ( off >= 0 ) {            var selector = url.slice(off, url.length);            url = url.slice(0, off);        }                callback = callback || function(){};        // Default to a GET request        var type = "GET";        // If the second parameter was provided        if ( params )            // If it's a function            if ( EJS.Util.isFunction( params ) ) {                // We assume that it's the callback                callback = params;                params = null;            // Otherwise, build a param string            } else {                params = ajaxAPI.param( params );                type = "POST";            }        var _self = this;        // Request the remote document        EJS.ajaxAPI.ajax({            url: url,            type: type,            dataType: "html",            data: params,            complete: function(res, status){                // If successful, inject the HTML into all the matched elements                if ( status == "success" || status == "notmodified" ){                    var tag = tagId;                    if ( typeof tagId == 'string' )                        tag = EJS.Dom.getElement(tagId);                    if(tag == null){                        return false;                    }                    tag.innerHTML = "";//用一个remove方法会比较好                    var htmlObj = EJS.htmlHandel.cleanout(res.responseText);                    //添加外部样式                    for(var i=0; i < htmlObj.href.length; i++){                                                EJS.Util.loadCss(htmlObj.href[i], "outer");                    }                    //添加内部样式                    for(var i=0; i< htmlObj.style.length; i++){                        EJS.Util.loadCss(htmlObj.style[i], "inner");                    }                    //添加html内容                    tag.innerHTML = htmlObj.html;                    //添加外部js                    for(var i = 0; i < htmlObj.src.length; i++){//加载并执行外包含javascript代码                                                EJS.ajaxAPI.ajax({                                url: htmlObj.src[i],                                async: false,                                dataType: "script"                            });                    }                    //添加内部js                    for(var i = 0; i < htmlObj.code.length; i++){//执行内包含javascript代码                                            EJS.Util.loadScriptEval(htmlObj.code[i]);                    }                    callback.apply(this, [res.responseText, status, res]);//回调方法                }            }        });        return this;    },    get: function( url, data, callback, type ) {        // shift arguments if data argument was ommited                if ( EJS.Util.isFunction( data ) ) {            callback = data;            data = null;        }        return EJS.ajaxAPI.ajax({            type: "GET",            url: url,            data: data,            success: callback,            dataType: type        });    },    getScript: function( url, callback ) {        return EJS.ajaxAPI.get(url, null, callback, "script");    },    getJSON: function( url, data, callback ) {        return EJS.ajaxAPI.get(url, data, callback, "json");    },    post: function( url, data, callback, type ) {        if ( EJS.Util.isFunction( data ) ) {            callback = data;            data = {};        }        return EJS.ajaxAPI.ajax({            type: "POST",            url: url,            data: data,            success: callback,            dataType: type        });    },    ajaxSetup: function( settings ) {         EJS.extend(  EJS.ajaxAPI.ajaxSettings, settings );    },    ajaxSettings: {        url: location.href,        global: false,        type: "GET",        timeout: 0,        contentType: "application/x-www-form-urlencoded",        processData: true,        async: true,        data: null,        username: null,        password: null,        accepts: {            xml: "application/xml, text/xml",            html: "text/html",            script: "text/javascript, application/javascript",            json: "application/json, text/javascript",            text: "text/plain",            _default: "*/*"        }    },    // Last-Modified header cache for next request    lastModified : {},    ajax : function( s ) {        // Extend the settings, but re-extend 's' so that it can be        // checked again later (in the test suite, specifically)        EJS.extend(s, EJS.ajaxAPI.ajaxSettings);        var jsonp, jsre = /=\?(&|$)/g, status, data,            type = s.type.toUpperCase();        // convert data if not already a string        if ( s.data && s.processData && typeof s.data != "string" ){            s.data = EJS.ajaxAPI.param(s.data);        }        // Handle JSONP Parameter Callbacks        if ( s.dataType == "jsonp" ) {            if ( type == "GET" ) {                if ( !s.url.match(jsre) )                    s.url += (s.url.match(/\?/) ? "&" : "?") + (s.jsonp || "callback") + "=?";            } else if ( !s.data || !s.data.match(jsre) )                s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?";            s.dataType = "json";        }        // Build temporary JSONP function        if ( s.dataType == "json" && (s.data && s.data.match(jsre) || s.url.match(jsre)) ) {            jsonp = "jsonp" + timeStamp.get();            // Replace the =? sequence both in the query string and the data            if ( s.data )                s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1");            s.url = s.url.replace(jsre, "=" + jsonp + "$1");                        // We need to make sure            // that a JSONP style response is executed properly            s.dataType = "script";            // Handle JSONP-style loading            window[ jsonp ] = function(tmp){                data = tmp;                success();                complete();                // Garbage collect                window[ jsonp ] = undefined;                try{ delete window[ jsonp ]; } catch(e){}                if ( head )                    head.removeChild( script );            };        }        if ( s.dataType == "script" && s.cache == null )            s.cache = false;        if ( s.cache === false && type == "GET" ) {            var ts = now();            // try replacing _= if it is there                        var ret = s.url.replace(/(\?|&)_=.*?(&|$)/, "$1_=" + ts + "$2");                        // if nothing was replaced, add timestamp to the end            s.url = ret + ((ret == s.url) ? (s.url.match(/\?/) ? "&" : "?") + "_=" + ts : "");//加上随机数                    }        // If data is available, append data to url for get requests        if ( s.data && type == "GET" ) {            s.url += (s.url.match(/\?/) ? "&" : "?") + s.data;                        // IE likes to send both get and post data, prevent this            s.data = null;        }        // Watch for a new set of requests        if ( s.global && ! EJS.active++ ){                        alert("ajaxStart")        }                    // Matches an absolute URL, and saves the domain        var remote = /^(?:\w+:)?\/\/([^\/?#]+)/;        // If we're requesting a remote document        // and trying to load JSON or Script with a GET                if ( s.dataType == "script" && type == "GET" && remote.test(s.url) && remote.exec(s.url)[1] != location.host ){            var head = document.getElementsByTagName("head")[0];            var script = document.createElement("script");            script.src = s.url;                        if (s.scriptCharset)                script.charset = s.scriptCharset;            // Handle Script loading            if ( !jsonp ) {                var done = false;                // Attach handlers for all browsers                script.onload = script.onreadystatechange = function(){                    if ( !done && (!this.readyState ||                            this.readyState == "loaded" || this.readyState == "complete") ) {                        done = true;                        success();                        complete();                        head.removeChild( script );                    }                };            }            head.appendChild(script);            // We handle everything using the script element injection            return undefined;        }        var requestDone = false;        // Create the request object; Microsoft failed to properly        // implement the XMLHttpRequest in IE7, so we use the ActiveXObject when it is available        var xhr = window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();        // Open the socket        // Passing null username, generates a login popup on Opera (#2865)                if( s.username )            xhr.open(type, s.url, s.async, s.username, s.password);        else            xhr.open(type, s.url, s.async);        // Need an extra try/catch for cross domain requests in Firefox 3        try {            // Set the correct header, if data is being sent                        if ( s.data )                xhr.setRequestHeader("Content-Type", s.contentType);            // Set the If-Modified-Since header, if ifModified mode.                        if ( s.ifModified )                xhr.setRequestHeader("If-Modified-Since", EJS.ajaxAPI.lastModified[s.url] || "Thu, 01 Jan 1970 00:00:00 GMT" );            // Set header so the called script knows that it's an XMLHttpRequest            xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");                        // Set the Accepts header for the server, depending on the dataType            xhr.setRequestHeader("Accept", s.dataType && s.accepts[ s.dataType ] ?                s.accepts[ s.dataType ] + ", */*" :                s.accepts._default );        } catch(e){}                // Allow custom headers/mimetypes        if ( s.beforeSend && s.beforeSend(xhr, s) === false ) {//这里好像没什么用            // cleanup active request counter            s.global && EJS.ajaxAPI.active--;            // close opended socket            xhr.abort();            return false;        }        if ( s.global ){                        alert("ajaxSend")        }                    // Wait for a response to come back        var onreadystatechange = function(isTimeout){            // The transfer is complete and the data is available, or the request timed out                        if ( !requestDone && xhr && (xhr.readyState == 4 || isTimeout == "timeout") ) {                requestDone = true;                // clear poll interval                if (ival) {                    clearInterval(ival);                    ival = null;                }                status = isTimeout == "timeout" && "timeout" || !EJS.ajaxAPI.httpSuccess( xhr ) && "error" || s.ifModified && EJS.httpNotModified( xhr, s.url ) && "notmodified" || "success";                                if ( status == "success" ) {                    // Watch for, and catch, XML document parse errors                    try {                        // process the data (runs the xml through httpData regardless of callback)                        data = EJS.ajaxAPI.httpData( xhr, s.dataType, s.dataFilter );                                            } catch(e) {                        status = "parsererror";                    }                }                // Make sure that the request was successful or notmodified                if ( status == "success" ) {                    // Cache Last-Modified header, if ifModified mode.                    var modRes;                    try {                        modRes = xhr.getResponseHeader("Last-Modified");                                            } catch(e) {} // swallow exception thrown by FF if header is not available                                        if ( s.ifModified && modRes )                        EJS.ajaxAPI.lastModified[s.url] = modRes;                    // JSONP handles its own success callback                                        if ( !jsonp )                        success();                } else {                    EJS.ajaxAPI.handleError(s, xhr, status);                }                // Fire the complete handlers                complete();                // Stop memory leaks                if ( s.async )                    xhr = null;            }        };        if ( s.async ) {            // don't attach the handler to the request, just poll it instead            var ival = setInterval(onreadystatechange, 13);                        // Timeout checker                        if ( s.timeout > 0 )                setTimeout(function(){                    // Check to see if the request is still happening                    if ( xhr ) {                        // Cancel the request                        xhr.abort();                        if( !requestDone )                            onreadystatechange( "timeout" );                    }                }, s.timeout);        }        // Send the data        try {            xhr.send(s.data);        } catch(e) {            EJS.ajaxAPI.handleError(s, xhr, null, e);        }        // firefox 1.5 doesn't fire statechange for sync requests        if ( !s.async )            onreadystatechange();        function success(){            // If a local callback was specified, fire it and pass it the data            if ( s.success )                s.success( data, status );            // Fire the global callback            if ( s.global ){                                alert("ajaxSuccess");            }        }        function complete(){            // Process result            if ( s.complete )                s.complete(xhr, status);            // The request was completed            if ( s.global ){                                alert("ajaxComplete")            }                            // Handle the global AJAX counter            if ( s.global && ! --EJS.ajaxAPI.active ){                                alert("ajaxStop");            }        }        // return XMLHttpRequest to allow aborting the request etc.        return xhr;    },    handleError: function( s, xhr, status, e ) {        // If a local callback was specified, fire it        if ( s.error ) s.error( xhr, status, e );        // Fire the global callback        if ( s.global ){                        alert("ajaxError");        }                },    // Counter for holding the number of active queries    active: 0,    // Determines if an XMLHttpRequest was successful or not    httpSuccess: function( xhr ) {//判断XMLHttpRequest对象的状态是否成功        try {            // IE error sometimes returns 1223 when it should be 204 so treat it as success, see #1450            return !xhr.status && location.protocol == "file:" ||                ( xhr.status >= 200 && xhr.status < 300 ) || xhr.status == 304 || xhr.status == 1223 ||                EJS.Client.isSafari && xhr.status == undefined;        } catch(e){}        return false;    },    // Determines if an XMLHttpRequest returns NotModified    httpNotModified: function( xhr, url ) {        try {            var xhrRes = xhr.getResponseHeader("Last-Modified");            // Firefox always returns 200. check Last-Modified date            return xhr.status == 304 || xhrRes == EJS.ajaxAPI.lastModified[url] ||                EJS.Client.isSafari && xhr.status == undefined;        } catch(e){}        return false;    },    httpData: function( xhr, type, filter ) {        var ct = xhr.getResponseHeader("content-type"),            xml = type == "xml" || !type && ct && ct.indexOf("xml") >= 0,            data = xml ? xhr.responseXML : xhr.responseText;                if ( xml && data.documentElement.tagName == "parsererror" )            throw "parsererror";                    // Allow a pre-filtering function to sanitize the response        if( filter )            data = filter( data, type );        // If the type is "script", eval it in global context        if ( type == "script" )            EJS.Util.loadScriptEval( data );        // Get the JavaScript object, if JSON is used.        if ( type == "json" ){            data = eval("(" + data + ")");        }        return data;    },    // Serialize an array of form elements or a set of    // key/values into a query string    param: function( a ) {        var s = [];        // If an array was passed in, assume that it is an array        // of form elements        if ( a.constructor == Array || a.jquery )            // Serialize the form elements            jQuery.each( a, function(){                s.push( encodeURIComponent(this.name) + "=" + encodeURIComponent( this.value ) );            });        // Otherwise, assume that it's an object of key/value pairs        else            // Serialize the key/values            for ( var j in a )                // If the value is an array then the key names need to be repeated                if ( a[j] && a[j].constructor == Array )                    jQuery.each( a[j], function(){                        s.push( encodeURIComponent(j) + "=" + encodeURIComponent( this ) );                    });                else                    s.push( encodeURIComponent(j) + "=" + encodeURIComponent( jQuery.isFunction(a[j]) ? a[j]() : a[j] ) );        // Return the resulting serialization        return s.join("&").replace(/%20/g, "+");    }    }}();